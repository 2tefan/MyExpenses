commit a63235bde75ac3abeade5688e8b011e30ec81c05
Author: Michael Totschnig <michael@totschnig.org>
Date:   Thu Mar 29 12:40:32 2012 +0200

    safer checks if attributes exist

diff --git a/src/org/totschnig/myexpenses/GrisbiImport.java b/src/org/totschnig/myexpenses/GrisbiImport.java
index d419083..37c94bc 100644
--- a/src/org/totschnig/myexpenses/GrisbiImport.java
+++ b/src/org/totschnig/myexpenses/GrisbiImport.java
@@ -162,6 +162,8 @@ public class GrisbiImport extends Activity implements DialogInterface.OnClickLis
     String grisbiFileVersion;
     String mainElementName;
     String subElementName;
+    String partiesElementName;
+    String nameAttributeName;
     /**
      * should we handle parties as well?
      */
@@ -245,24 +247,31 @@ public class GrisbiImport extends Activity implements DialogInterface.OnClickLis
       root = dom.getDocumentElement();
       Node generalNode = root.getElementsByTagName("General").item(0);
       if (generalNode != null) {
-        grisbiFileVersion = generalNode.getAttributes().getNamedItem("File_version").getNodeValue();
-        Log.i("MyExpenses","found Grisbi version" + grisbiFileVersion);
+        Node versionAttr = generalNode.getAttributes().getNamedItem("File_version");
+        if (versionAttr != null) {
+          grisbiFileVersion = versionAttr.getNodeValue();
+          Log.i("MyExpenses","found Grisbi version" + grisbiFileVersion);
+        }
       }
       else {
-        Node versionNode = root.getElementsByTagName("Version_fichier_categ").item(0);
+        Node versionNode = root.getElementsByTagName("Version_fichier").item(0);
         if (versionNode != null) {
           //unfortunately we have to retrieve the first text node in order to get at the value
           grisbiFileVersion = versionNode.getChildNodes().item(0).getNodeValue();
           Log.i("MyExpenses","found Grisbi version" + grisbiFileVersion);
         }
         else {
-          Log.i("MyExpenses","did not find Grisbi version, assuming 0.6.0");
+          Log.i("MyExpenses","did not find Grisbi version");
           //we are mapping the existence of Categorie to 0.5.0
           //and Category to 0.6.0
-          if (root.getElementsByTagName("Category").getLength() > 0)
+          if (root.getElementsByTagName("Category").getLength() > 0) {
             grisbiFileVersion = "0.6.0";
-          else if (root.getElementsByTagName("Categorie").getLength() > 0)
+            Log.i("MyExpenses","assuming Grisbi version 0.6.0");
+          }
+          else if (root.getElementsByTagName("Categorie").getLength() > 0) {
             grisbiFileVersion = "0.5.0";
+            Log.i("MyExpenses","assuming Grisbi version 0.5.0");
+          }
           else {
             Toast.makeText(activity, "Unable to determine Grisbi file version", Toast.LENGTH_LONG).show();
             cancel(false);
@@ -273,15 +282,18 @@ public class GrisbiImport extends Activity implements DialogInterface.OnClickLis
       if (grisbiFileVersion.equals("0.6.0")) {
         mainElementName = "Category";
         subElementName = "Sub_category";
+        partiesElementName = "Party";
+        nameAttributeName = "Na";
       } else if (grisbiFileVersion.equals("0.5.0")) {
         mainElementName = "Categorie";
         subElementName = "Sous-categorie";
+        partiesElementName = "Tiers";
+        nameAttributeName = "Nom";
       } else {
         Toast.makeText(activity, "Unsupported Grisbi File Version: "+grisbiFileVersion, Toast.LENGTH_LONG).show();
         cancel(false);
         return;
       }
-      parties = root.getElementsByTagName("Party");
     }
     public Integer getSource() {
       return source;
@@ -368,9 +380,11 @@ public class GrisbiImport extends Activity implements DialogInterface.OnClickLis
       } else {
         importCats050();
       }
-      if (partiesAreToBeHandledP)
+      if (partiesAreToBeHandledP) {
+        parties = root.getElementsByTagName(partiesElementName);
         setTitle(activity.getString(R.string.grisbi_import_parties_loading,sourceStr));
         importParties();
+      }
       return(null);
     }
     private void importParties() {
@@ -379,12 +393,19 @@ public class GrisbiImport extends Activity implements DialogInterface.OnClickLis
       publishProgress(0);
       int count = 0;
       NamedNodeMap atts;
+      Node nameAttr;
+      
       publishProgress(0);
       for (int i=0;i<parties.getLength();i++){
-        count++;
         atts = parties.item(i).getAttributes();
-        if (mDbHelper.createPayee(atts.getNamedItem("Na").getNodeValue()) != -1)
+        nameAttr = atts.getNamedItem(nameAttributeName);
+        if (nameAttr == null) {
+          continue;
+        }
+        count++;
+        if (mDbHelper.createPayee(nameAttr.getNodeValue()) != -1) {
           totalImportedParty++;
+        }
         if (count % 10 == 0) {
           publishProgress(count);
         }
@@ -395,18 +416,28 @@ public class GrisbiImport extends Activity implements DialogInterface.OnClickLis
       String label;
       long main_id, sub_id;
       NamedNodeMap atts;
+      Node nameAttr;
       
       for (int i=0;i<categories.getLength();i++){
-        count++;
         atts = categories.item(i).getAttributes();
-        label = atts.getNamedItem("Nom").getNodeValue();
-        main_id = mDbHelper.createCategory(label,0);
+        nameAttr = atts.getNamedItem(nameAttributeName);
+        if (nameAttr == null) {
+          continue;
+        }
+        count++;
+        label = nameAttr.getNodeValue();
+        main_id = mDbHelper.getCategoryId(label, 0);
         if (main_id != -1) {
-          totalImportedCat++;
+          Log.i("MyExpenses","category with label" + label + " already defined");
         } else {
-          //this should not happen
-          Log.w("MyExpenses","could neither retrieve nor store main category " + label);
-          continue;
+          main_id = mDbHelper.createCategory(label,0);
+          if (main_id != -1) {
+            totalImportedCat++;
+          } else {
+            //this should not happen
+            Log.w("MyExpenses","could neither retrieve nor store main category " + label);
+            continue;
+          }
         }
         if (count % 10 == 0) {
           publishProgress(count);
@@ -416,15 +447,18 @@ public class GrisbiImport extends Activity implements DialogInterface.OnClickLis
           Node child = children.item(j);
           String nodeName = child.getNodeName();
           if ((nodeName != null) & (nodeName.equals(subElementName))) {
-            count++;
             atts = child.getAttributes();
-            label = atts.getNamedItem("Nom").getNodeValue();
+            nameAttr = atts.getNamedItem(nameAttributeName);
+            if (nameAttr == null) {
+              continue;
+            }
+            count++;
+            label = nameAttr.getNodeValue();
             sub_id = mDbHelper.createCategory(label,main_id);
             if (sub_id != -1) {
               totalImportedCat++;
             } else {
-              //this should not happen
-              Log.w("MyExpenses","could neither retrieve nor store main category " + label);
+              Log.i("MyExpenses","could not store sub category " + label);
             }
             if (count % 10 == 0) {
               publishProgress(count);
@@ -443,11 +477,19 @@ public class GrisbiImport extends Activity implements DialogInterface.OnClickLis
       String label;
       String id;
       long _id;
+      NamedNodeMap atts;
+      Node nameAttr;
+      Node numberAttr;
 
       for (int i=0;i<categories.getLength();i++){
-        NamedNodeMap category = categories.item(i).getAttributes();
-        label = category.getNamedItem("Na").getNodeValue();
-        id =  category.getNamedItem("Nb").getNodeValue();
+        atts = categories.item(i).getAttributes();
+        nameAttr = atts.getNamedItem(nameAttributeName);
+        numberAttr = atts.getNamedItem("Nb");
+        if (nameAttr == null || numberAttr == null) {
+          continue;
+        }
+        label = nameAttr.getNodeValue();
+        id = numberAttr.getNodeValue();
         _id = mDbHelper.getCategoryId(label, 0);
         if (_id != -1) {
           Foreign2LocalIdMap.put(id, _id);
@@ -476,11 +518,21 @@ public class GrisbiImport extends Activity implements DialogInterface.OnClickLis
       String parent_id;
       Long mapped_parent_id;
       long _id;
+      NamedNodeMap atts;
+      Node nameAttr;
+      Node parentAttr;
+      
       for (int i=0;i<sub_categories.getLength();i++){
-        NamedNodeMap sub_category = sub_categories.item(i).getAttributes();
-        label = sub_category.getNamedItem("Na").getNodeValue();
+        atts = sub_categories.item(i).getAttributes();
+        nameAttr = atts.getNamedItem(nameAttributeName);
+        parentAttr = atts.getNamedItem("Nbc");
+        if (nameAttr == null || parentAttr == null) {
+          continue;
+        }
+
+        label = nameAttr.getNodeValue();
         //id =  sub_category.getNamedItem("Nb").getNodeValue();
-        parent_id = sub_category.getNamedItem("Nbc").getNodeValue();
+        parent_id = parentAttr.getNodeValue();
         mapped_parent_id = Foreign2LocalIdMap.get(parent_id);
         //TODO: for the moment, we do not deal with subcategories,
         //if we were not able to import a matching category
